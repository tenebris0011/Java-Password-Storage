
import java.awt.Color;
import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.*;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/*
 * This program is designed to take user input into the text fields
 * and store it into a SQL Database.
 * Working on encryption and moving the SQLite.
 */

/**
 *
 * @author wilso
 */
public class PasswordGUI extends javax.swing.JFrame
{

    /**
     * Creates new form PasswordGUI
     */
    public PasswordGUI()
    {
        initComponents();
        fetch();
    }
    String url = "jdbc:mysql://server:3306/PasswordServer?serverTimezone=UTC";
    String username = "user";
    String password = "password";
                 
    Connection myConn = null;
    PreparedStatement myStmt = null;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents()
    {

        testButton = new javax.swing.JButton();
        textPass = new javax.swing.JPasswordField();
        jScrollPane2 = new javax.swing.JScrollPane();
        passTest = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        textUser = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        textWeb = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        buttonStore = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        passwordTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        testButton.setText("Check Password");
        testButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                testButtonActionPerformed(evt);
            }
        });

        textPass.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                textPassActionPerformed(evt);
            }
        });

        passTest.setEditable(false);
        passTest.setColumns(20);
        passTest.setRows(5);
        jScrollPane2.setViewportView(passTest);

        jLabel1.setText("Password");

        jLabel2.setText("Username or Email");

        jLabel3.setText("Website");

        buttonStore.setText("Store Password");
        buttonStore.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonStoreActionPerformed(evt);
            }
        });

        buttonClear.setText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonClearActionPerformed(evt);
            }
        });

        passwordTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {

            }
        ));
        passwordTable.getTableHeader().setReorderingAllowed(false);
        passwordTable.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                passwordTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(passwordTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonStore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(testButton, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                            .addComponent(buttonClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textPass, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textUser, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textWeb, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textWeb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonStore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonClear)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>                        

public void fetch()
{
    try
    {
        myConn = DriverManager.getConnection(url, username, password);
        // Statement
        String sql = "select * from Passwords";
        // Execute query
        myStmt = myConn.prepareStatement(sql);
        ResultSet rs = myStmt.executeQuery();
        
        passwordTable.setModel(DbUtils.resultSetToTableModel(rs));
    } 
    catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
    }
}
    private void testButtonActionPerformed(java.awt.event.ActionEvent evt)                                           
    {                                               
        //Grabs info from text fields inputted into gui
        String web = textWeb.getText();
        String user = textUser.getText();
        String pass = textPass.getText();
        //sets boolean value based on if inputted pass variable contains spaces.
        boolean space = pass.contains(" "); 
        //Checks pass length to verify proper length
        if (pass.length()>=8)
        {
            //Uses a pattern check to verify that password contains required letters, characters, or numbers.
            boolean letter = Pattern.compile("[a-zA-z]").matcher(pass).find();
            boolean digit = Pattern.compile("[0-9]").matcher(pass).find();
            boolean special = Pattern.compile ("[!@#$%&*()_+=|<>?{}\\[\\]~-]").matcher(pass).find();
            //If password meets expectations runs the if statement
            if (letter == true && digit == true && special == true && space == false)
            {
                passTest.setText("Good to go.");
                passTest.setBackground(Color.green);  
            }
            else
            {
            passTest.setText("Passord should contain a digit, \nspecial character, and no spaces.");
            passTest.setBackground(Color.red);
            }
        }
        else
        {
            passTest.setText("Password must be 8 \nor more characters.");
            passTest.setBackground(Color.red);
        }
    }                                          

    private void textPassActionPerformed(java.awt.event.ActionEvent evt)                                         
    {                                             
        // TODO add your handling code here:
    }                                        

    private void buttonStoreActionPerformed(java.awt.event.ActionEvent evt)                                            
    {                                                
                //Grabs info from text fields inputted into gui
                String web = textWeb.getText();
                String user = textUser.getText();
                String pass = textPass.getText();
               try 
                {
                    // Connection
                    myConn = DriverManager.getConnection(url, username, password);
                    // Statement
                    String sql = "insert into Passwords " + " (web, user, pass)" + " values (?, ?, ?)";
                    // Execute query
                    myStmt = myConn.prepareStatement(sql);
                    // Set param values
                    myStmt.setString(1, web);
                    myStmt.setString(2, user);
                    myStmt.setString(3, pass);
                    // Execute query 
                    myStmt.executeUpdate();
                    ResultSet myRs = myStmt.executeQuery("select * from Passwords");
                    fetch();
                }
                catch (Exception exc)
                {
                    exc.printStackTrace();
                }
    }                                           

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt)                                            
    {                                                
        //clears text fields.
        textWeb.setText("");
        textUser.setText("");
        textPass.setText("");
        passTest.setText("");
        passTest.setBackground(Color.white);
    }                                           

    private void passwordTablePropertyChange(java.beans.PropertyChangeEvent evt)                                             
    {                                                 
        // TODO add your handling code here:
    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(PasswordGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(PasswordGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(PasswordGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(PasswordGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new PasswordGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonStore;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea passTest;
    private javax.swing.JTable passwordTable;
    private javax.swing.JButton testButton;
    private javax.swing.JPasswordField textPass;
    private javax.swing.JTextField textUser;
    private javax.swing.JTextField textWeb;
    // End of variables declaration                   
}
